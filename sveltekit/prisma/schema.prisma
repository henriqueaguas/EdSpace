generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_user")

  @@unique([provider, providerAccountId], map: "account_provider_provideraccountid_key")
}

model post {
  id          String        @id @default(dbgenerated("uuid_generate_v4()"))
  title       String
  description String?
  difficulty  difficulty?
  author_id   String
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  author      user          @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_author")
  post_rating post_rating[]
  post_topic  post_topic[]
  post_view   post_view[]
  saved_post  saved_post[]
  post_stats  post_stats[]
}

model post_rating {
  user_id String
  post_id String
  rating  Int
  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post")
  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([user_id, post_id], map: "pk_post_rating")
  @@index([post_id], map: "idx_post_rating_post_id")
}

model post_topic {
  topic_id String
  post_id  String
  post     post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post")
  topic    topic  @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topic")

  @@id([topic_id, post_id], map: "pk_post_topic")
  @@index([post_id], map: "idx_post_topic_post_id")
}

model post_view {
  user_id String
  post_id String
  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post")
  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([user_id, post_id], map: "pk_post_view")
  @@index([post_id], map: "idx_post_view_post_id")
}

model saved_post {
  user_id String
  post_id String
  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post")
  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([user_id, post_id], map: "pk_saved_post")
}

model session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()"))
  sessionToken String   @unique(map: "session_sessiontoken_key") @default(dbgenerated("uuid_generate_v4()"))
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_user")
}

model topic {
  id           String         @id
  feed_topic   feed_topic[]
  post_topic   post_topic[]
  topic_follow topic_follow[]
  topic_stats  topic_stats[]
}

model topic_follow {
  topic_id    String
  follower_id String
  topic       topic  @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topic")
  user        user   @relation(fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([topic_id, follower_id], map: "pk_topic_follow")
}

model user {
  id               String         @id @default(dbgenerated("uuid_generate_v4()"))
  name             String         @unique @default("anonymous")
  email            String         @unique
  emailVerified    DateTime?
  image            String?
  signupComplete   Boolean?       @default(false)
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  name_updated_at  DateTime?      @db.Timestamp(6)
  image_updated_at DateTime?      @db.Timestamp(6)
  account          account[]
  feed             feed[]
  feed_author      feed_author[]
  post             post[]
  post_rating      post_rating[]
  post_view        post_view[]
  saved_post       saved_post[]
  session          session[]
  topic_follow     topic_follow[]
  follows          user_follow[]  @relation("follower_user_follow")
  followers        user_follow[]  @relation("user_user_follow")
  post_stats       post_stats[]
  user_stats       user_stats[]
}

model user_follow {
  user_id     String
  follower_id String
  follower    user   @relation("follower_user_follow", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_follower")
  user        user   @relation("user_user_follow", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([user_id, follower_id], map: "pk_user_follow")
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model feed {
  id          String        @id @default(dbgenerated("uuid_generate_v4()"))
  owner_id    String
  position    Int           @default(0)
  name        String
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime?     @db.Timestamp(6)
  user        user          @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_author")
  feed_author feed_author[]
  feed_topic  feed_topic[]
}

model feed_author {
  feed_id   String
  author_id String
  user      user   @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_author")
  feed      feed   @relation(fields: [feed_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_feed")

  @@id([feed_id, author_id], map: "pk_feed_authors")
}

model feed_topic {
  feed_id  String
  topic_id String
  feed     feed   @relation(fields: [feed_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_feed")
  topic    topic  @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topic")

  @@id([feed_id, topic_id], map: "pk_feed_topics")
}

view topic_stats {
  id              String  @id
  posts_count     BigInt?
  followers_count BigInt?
  topic           topic   @relation(fields: [id], references: [id])
}

view post_stats {
  ranking_position BigInt
  id               String      @id
  title            String
  description      String?
  difficulty       difficulty?
  author_id        String
  created_at       DateTime    @db.Timestamp(6)
  avg_rating       Decimal     @db.Decimal
  views_count      BigInt
  rates_count      BigInt
  score            Float
  topics           String[]
  post             post        @relation(fields: [id], references: [id])
  author           user        @relation(fields: [author_id], references: [id])

  @@map("post_stats")
}

view user_stats {
  ranking_position         BigInt?
  id                       String    @id
  name                     String
  email                    String
  emailVerified            DateTime?
  image                    String?
  signupComplete           Boolean?
  created_at               DateTime  @db.Timestamp(6)
  name_updated_at          DateTime? @db.Timestamp(6)
  image_updated_at         DateTime? @db.Timestamp(6)
  topics_user_publishes_on String[]
  posts_published          BigInt?
  avg_post_score           Decimal   @db.Decimal
  avg_post_rating          Decimal   @db.Decimal
  followers_count          BigInt
  score                    Float
  user                     user      @relation(fields: [id], references: [id])

  @@map("user_stats")
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
view post_stats_not_sorted {
  id          String?
  title       String?
  description String?
  difficulty  difficulty?
  author_id   String?
  created_at  DateTime?   @db.Timestamp(6)
  avg_rating  Decimal?    @db.Decimal
  views_count BigInt?
  rates_count BigInt?
  topics      String[]

  @@ignore
}

enum difficulty {
  easy
  medium
  advanced
}
